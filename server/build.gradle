buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.6.1'

// Updating to gradle 7, means moving from this plugin to something else
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'org.springframework.boot' version '2.6.1'
}

apply plugin: 'docker'
apply plugin: 'io.spring.dependency-management'
//apply plugin: 'spring-boot-gradle-plugin'

configurations {
    // A configuration meant for consumers that need the API of this component
    implementation {
        canBeResolved = true
    }
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

// This affects the Docker repo name.
group = 'extender'

dependencyManagement {
    imports {
        mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.436'
    }
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    implementation('org.springframework.boot:spring-boot-starter-jetty')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-data-rest')
    implementation('org.springframework.security:spring-security-test')
    implementation('com.samskivert:jmustache:1.15')
    implementation('com.google.guava:guava:27.0-jre')
    implementation('org.apache.httpcomponents:httpclient:4.5.13')
    implementation('org.apache.httpcomponents:httpmime:4.5.13')
    implementation('org.apache.commons:commons-lang3:3.8.1')
    implementation('org.apache.commons:commons-compress:1.21')
    implementation('commons-io:commons-io:2.11.0')
    implementation('commons-fileupload:commons-fileupload:1.3.3')
    implementation('commons-chain:commons-chain:1.2')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.influxdb:influxdb-java:2.10')
    implementation('com.amazonaws:aws-java-sdk-s3:1.11.438')
    implementation('io.micrometer:micrometer-core:1.8.1')

    testImplementation('junit:junit:4.12')
    testImplementation('org.springframework:spring-test')
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.smali:dexlib2:2.2.5')
    testImplementation project(':client')
}

task createVersionFile(type:Exec) {
    commandLine 'python', 'src/main/java/com/defold/extender/version.py'
}

compileJava {
    dependsOn createVersionFile
}

jar {
    baseName = 'extender'
    version =  '0.1.0'
    //enabled = true
    archiveClassifier = '' // use empty string to avoid the 'plain' suffix

    manifest {
        attributes(
          'Class-Path': configurations.implementation.collect { it.getName() }.join(' '),
          'Main-Class': 'com.defold.extender.ExtenderApplication'
        )
    }
    from { configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) } }
}

// task fatJar(type: Jar) {
//     baseName = 'extender'
//     version =  '0.1.0'

//     manifest {
//         attributes(
//           //'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
//           'Implementation-Title': 'Defold Extender',
//           'Main-Class': 'com.defold.extender.ExtenderApplication'
//         )
//     }
//     from {
//         configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
//     }

//     //from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
//     with jar
// }

task buildDocker(type: Docker) {
    dependsOn 'build', ':manifestmergetool:mainJar'
    push = false
    applicationName = jar.baseName
    dockerfile = file('docker/Dockerfile')
    doFirst {
        copy {
            from(project.projectDir) {
                include "users/**"
            }
            into stageDir
        }
        copy {
            from jar
            into stageDir
        }
        copy {
            from project(':manifestmergetool').collect { it.tasks.withType(Jar) }
            into stageDir
        }
        copy {
            from 'docker'
            into stageDir
        }
    }
}
